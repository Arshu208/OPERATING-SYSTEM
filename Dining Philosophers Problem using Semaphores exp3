#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_PHILOSOPHERS 5

sem_t mutex;
sem_t chopsticks[NUM_PHILOSOPHERS];

void *philosopher(void *num) {
    int philosopher = *(int*)num;
    int left = philosopher;
    int right = (philosopher + 1) % NUM_PHILOSOPHERS;

    while (1) {
        printf("Philosopher %d is thinking\n", philosopher);
        sleep(2);

        sem_wait(&mutex);
        sem_wait(&chopsticks[left]);
        sem_wait(&chopsticks[right]);
        printf("Philosopher %d is eating\n", philosopher);
        sleep(2);
        sem_post(&chopsticks[left]);
        sem_post(&chopsticks[right]);
        sem_post(&mutex);
    }
}

int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    int philosophers[NUM_PHILOSOPHERS];
    
    sem_init(&mutex, 0, 1);

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&chopsticks[i], 0, 1);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosophers[i] = i;
        pthread_create(&threads[i], NULL, philosopher, &philosophers[i]);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }

    sem_destroy(&mutex);
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&chopsticks[i]);
    }

    return 0;
}
