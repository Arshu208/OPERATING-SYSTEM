#include <stdio.h>

#define P 5 // No. of processes
#define R 3 // No. of resources

void calculateNeed(int need[][R], int max[][R], int allot[][R]) {
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            need[i][j] = max[i][j] - allot[i][j];
        }
    }
}

int isSafe(int processes[], int avail[], int max[][R], int allot[][R]) {
    int need[P][R];
    calculateNeed(need, max, allot);

    int finish[P] = {0};  // track finished processes
    int safeSeq[P]; // store safe sequence

    int work[R];
    for (int i = 0; i < R; i++) {
        work[i] = avail[i];
    }

    int count = 0;
    while (count < P) {
        int found = 0;
        for (int p = 0; p < P; p++) {
            if (finish[p] == 0) {
                int flag = 1;
                for (int r = 0; r < R; r++) {
                    if (need[p][r] > work[r]) {
                        flag = 0;
                        break;
                    }
                }
                if (flag) {
                    safeSeq[count++] = p;
                    finish[p] = 1;
                    for (int r = 0; r < R; r++) {
                        work[r] += allot[p][r];
                    }
                    found = 1;
                    break;
                }
            }
        }
        if (!found) {
            printf("System is not in a safe state\n");
            return 0;
        }
    }

    printf("System is in a safe state.\nSafe sequence: ");
    for (int i = 0; i < P; i++) {
        printf("P%d ", safeSeq[i]);
    }
    printf("\n");
    return 1;
}

int main() {
    int processes[] = {0, 1, 2, 3, 4};
    int avail[] = {3, 3, 2}; // Available resources

    int max[][R] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };

    int allot[][R] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    isSafe(processes, avail, max, allot);
    return 0;
}
